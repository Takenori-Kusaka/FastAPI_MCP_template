name: Python Tests & API Docs

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  code-quality:
    name: コード品質チェック
    runs-on: ubuntu-latest
    
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Pythonのセットアップ
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Poetryのインストール
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
    
    - name: Poetryの設定
      run: |
        poetry config virtualenvs.in-project true
    
    - name: Poetry lock 更新
      run: |
        poetry lock
    
    - name: Poetry依存関係のキャッシュ
      uses: actions/cache@v4
      with:
        path: .venv
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-
    
    - name: 依存関係のインストール
      run: |
        poetry install --no-interaction
    
    - name: コードスタイルチェック
      run: |
        poetry run python -m black app tests
        poetry run python -m isort app tests
        echo "コードスタイルを自動修正しました"
    
    - name: 型チェックの実行
      run: |
        # 型チェックのためのスタブファイルを作成
        mkdir -p .venv/lib/python3.10/site-packages/pybacklogpy
        touch .venv/lib/python3.10/site-packages/pybacklogpy/py.typed
        # 型チェックの実行
        poetry run python -m mypy --config-file mypy.ini app tests
    
    - name: セキュリティチェック
      run: |
        poetry run pip install bandit safety
        poetry run python -m bandit -r app -x tests
        # 非対話的モードで実行し、失敗してもCIを通過させる
        poetry run python -m safety check --full-report --no-input || true
        
  unit-tests:
    name: 単体テスト
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Pythonのセットアップ
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Poetryのインストール
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
    
    - name: Poetryの設定
      run: |
        poetry config virtualenvs.in-project true
    
    - name: Poetry依存関係のキャッシュ
      uses: actions/cache@v4
      with:
        path: .venv
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-
    
    - name: 依存関係のインストール
      run: |
        poetry install --no-interaction
    
    - name: 単体テストの実行
      run: |
        poetry run python -m pytest tests/unit/ --cov=app --cov-report=xml --cov-report=json:coverage.json --cov-report=html --cov-report=term
    
    - name: カバレッジ閾値チェック
      run: |
        poetry run pip install coverage-threshold
        poetry run coverage-threshold --line-coverage-min=10

  openapi-generation:
    name: OpenAPI仕様書生成
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Pythonのセットアップ
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Poetryのインストール
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
    
    - name: Poetryの設定
      run: |
        poetry config virtualenvs.in-project true
    
    - name: Poetry依存関係のキャッシュ
      uses: actions/cache@v4
      with:
        path: .venv
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-
    
    - name: 依存関係のインストール
      run: |
        poetry install --no-interaction
    
    - name: 環境変数の設定
      run: |
        echo "BACKLOG_API_KEY=dummy_api_key" >> $GITHUB_ENV
        echo "BACKLOG_SPACE=dummy_space" >> $GITHUB_ENV
        
    - name: アプリケーションの起動
      run: |
        poetry run python -m app.main --port 8001 &
        echo "アプリケーションを起動しました。5秒待機します..."
        sleep 5
        
    - name: OpenAPI仕様書の生成
      run: |
        poetry run python scripts/generate_openapi.py docs openapi.yaml
        
    - name: OpenAPI仕様書のアップロード
      uses: actions/upload-artifact@v4
      with:
        name: openapi-spec
        path: docs/openapi.yaml
        retention-days: 30

  cdk-unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install CDK dependencies
        working-directory: cdk
        run: npm ci

      - name: Build CDK TypeScript code
        working-directory: cdk
        run: npm run build

      - name: Install AWS CDK CLI
        run: npm install -g aws-cdk

      - name: Synthesize CDK stack (for dev environment)
        working-directory: cdk
        run: cdk synth --context environment=dev

      - name: Run CDK unit tests
        working-directory: cdk
        run: npm test
